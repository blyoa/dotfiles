include c.snip

" Delete snippet depended on C.
delete if
delete enum
delete typedef
delete main

snippet		activ_proctype
abbr		active proctype () {}
options		head
	active${1:#:[size]} proctype ${2:#:proc_name}(${3:#:args}) {
		${0:TARGET}
	}

snippet		atomic
abbr		atomic
	atomic {
		${0:TARGET}
	}
	
snippet		chan
abbr		chan = [] of {}
	chan ${1:#:chan_name} = [${2:#:size}] of {${3:#:types}}
	
snippet		c_code
abbr		c_code [] {}
	c_code ${1:#:[condition]} {
		${0:TARGET}
	}

snippet		c_decl
abbr		c_decl {}
options		head
	c_decl {
		${0:TARGET}
	}

snippet		c_expr
abbr		c_expr [] {}
	c_expr ${1:#:[assertion]} {
		${0:TARGET}
	}

snippet		c_state
abbr		c_state "" ""
options		head
	c_state "${1:#:type_and_name}" "${2:#:scope}"

snippet		c_track
abbr		c_track "" ""
options		head
	c_track "${1:#:address}" "${2:#:sizeof}"

snippet		do
abbr		do :: od
	do
		:: ${0:TARGET}
	od

snippet		d_step
abbr		d_step
	d_step {
		${0:TARGET}
	}

snippet		if
abbr		if :: fi
	if 
		:: ${0:TARGET}
	fi

snippet		if_c_code
abbr		if () {}
	if (${1:#:condition}) {
		${0:TARGET}
	}

snippet		init
abbr		init
options		head
	init {
		${0:TARGET}
	}

snippet		proctype
abbr		proctype () {}
options		head
	proctype ${1:#:proc_name}(${2:#:args}) {
		${0:TARGET}
	}

snippet		typedef
abbr		typedef {}
options		head
	typedef ${1:#:typename} {
		${0:TARGET}
	}

# vim: noexpandtab
